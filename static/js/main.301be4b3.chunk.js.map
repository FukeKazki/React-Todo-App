{"version":3,"sources":["components/Header.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","theme","title","flexGrow","button","color","Header","classes","AppBar","position","component","Toolbar","Typography","varient","className","Button","href","footer","bottom","width","backgroundColor","footerContainer","justifyContent","alignItems","Footer","INITIAL_TASK","doing","App","useState","tasks","setTasks","task_title","setTask_title","Fragment","Container","maxWidth","CssBaseline","Box","mt","display","TextField","label","value","onChange","e","target","disabled","some","task","variant","onClick","List","style","marginTop","map","ListItem","key","Checkbox","checked","filter","x","handleCheckboxChanges","ListItemText","deleteTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TASMA,EAAWC,aAAW,SAAAC,GAAK,MAAK,CAClCC,MAAO,CACHC,SAAU,GAEdC,OAAQ,CACJC,MAAO,eAkBAC,EAdA,WACX,IAAMC,EAAUR,IAChB,OACI,kBAACS,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAU,UAChC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,KACvBI,UAAWP,EAAQL,OAD/B,wHAEA,kBAACa,EAAA,EAAD,CAAQC,KAAK,8CACLF,UAAWP,EAAQH,QAD3B,aClBVL,EAAWC,aAAW,SAAAC,GAAK,MAAK,CAClCgB,OAAQ,CACJR,SAAU,WACVS,OAAQ,EACRC,MAAO,OACPC,gBAAiB,UACjBf,MAAO,WAEXgB,gBAAiB,CACbC,eAAgB,SAChBC,WAAY,cAeLC,EAXA,WACX,IAAMjB,EAAUR,IAChB,OACI,4BAAQe,UAAWP,EAAQU,QACvB,kBAACN,EAAA,EAAD,CAASG,UAAWP,EAAQc,iBACxB,kBAACT,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,MAAnC,oBCVVe,EAAe,CACjBvB,MAAO,gCACPwB,OAAO,GAyFIC,EAtFH,WAAO,IAAD,EACYC,mBAAS,CAACH,IADtB,mBACPI,EADO,KACAC,EADA,OAEsBF,mBAAS,IAF/B,mBAEPG,EAFO,KAEKC,EAFL,KAmCd,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWxB,UAAU,OAAOyB,SAAS,MACjC,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACIC,GAAI,EACJC,QAAQ,OACRjB,eAAe,gBAEf,kBAACkB,EAAA,EAAD,CACIC,MAAM,2BACNC,MAAOX,EACPY,SA5CW,SAAAC,GAC3BZ,EAAcY,EAAEC,OAAOH,UA6CX,kBAAC3B,EAAA,EAAD,CACI+B,SAAyB,KAAff,GAtCnBF,EAAMkB,MAAK,SAAAC,GAAI,OAAIA,EAAK9C,QAAU6B,KAuCzBkB,QAAQ,YACR5C,MAAM,UACN6C,QAtCJ,WACZpB,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAChB3B,MAAO6B,EACPL,OAAO,MAVXM,EAAc,KA8CEhB,KAAK,IALT,iBAUJ,kBAACmC,EAAA,EAAD,CACIC,MAAO,CAACC,UAAW,QACnB3C,UAAU,MACTmB,EAAMyB,KAAI,SAAAN,GAAI,OACX,kBAACO,EAAA,EAAD,CAAUC,IAAKR,EAAK9C,MAAOQ,UAAU,MACjC,kBAAC+C,EAAA,EAAD,CACIC,QAASV,EAAKtB,MACdgB,MAAM,UACNC,SAAU,kBAxCR,SAAAK,GAC1BlB,EAASD,EAAM8B,QAAO,SAAAC,GAElB,OADIA,IAAMZ,IAAMY,EAAElC,OAASkC,EAAElC,OACtBkC,MAqC6BC,CAAsBb,MAE1C,kBAACc,EAAA,EAAD,KAAed,EAAK9C,OACpB,kBAACa,EAAA,EAAD,CACIC,KAAK,GACLkC,QAAS,kBAjDlB,SAACF,GAChBlB,EAASD,EAAM8B,QAAO,SAAAC,GAAC,OAAIA,IAAMZ,MAgDMe,CAAWf,KAF9B,sBAUhB,kBAAC,EAAD,QC1FQgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.301be4b3.chunk.js","sourcesContent":["import React from 'react'\nimport {\n    Button,\n    AppBar,\n    Toolbar,\n    Typography,\n    makeStyles\n} from '@material-ui/core'\n\nconst useStyle = makeStyles(theme => ({\n    title: {\n        flexGrow: 1,\n    },\n    button: {\n        color: '#ffffff'\n    }\n}))\n\nconst Header = () => {\n    const classes = useStyle()\n    return (\n        <AppBar position='static' component='header'>\n            <Toolbar>\n                <Typography varient='h1' component='h1'\n                            className={classes.title}>Hookつかってきれいなコードで書いたTodoアプリ</Typography>\n                <Button href='https://github.com/FukeKazki/React-Todo-App'\n                        className={classes.button}>GitHub</Button>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport {\n    Toolbar,\n    Typography,\n    makeStyles\n} from '@material-ui/core'\n\nconst useStyle = makeStyles(theme => ({\n    footer: {\n        position: 'absolute',\n        bottom: 0,\n        width: '100%',\n        backgroundColor: '#4d4d4d',\n        color: '#ffffff',\n    },\n    footerContainer: {\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n}))\n\nconst Footer = () => {\n    const classes = useStyle()\n    return (\n        <footer className={classes.footer}>\n            <Toolbar className={classes.footerContainer}>\n                <Typography varient='h3' component='h3'>cc @fukke0906</Typography>\n            </Toolbar>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React, {useState} from 'react'\nimport 'typeface-roboto'\nimport {\n    Button,\n    TextField,\n    Box,\n    Container,\n    CssBaseline,\n    List,\n    ListItem,\n    ListItemText,\n    Checkbox,\n} from '@material-ui/core'\nimport Header from './Header'\nimport Footer from './Footer'\n\nconst INITIAL_TASK = {\n    title: 'Reactのお勉強',\n    doing: false,\n}\n\nconst App = () => {\n    const [tasks, setTasks] = useState([INITIAL_TASK])\n    const [task_title, setTask_title] = useState('')\n\n    const handleTextFieldChanges = e => {\n        setTask_title(e.target.value)\n    }\n\n    const resetTextField = () => {\n        setTask_title('')\n    }\n\n    const isTaskInclude = () => {\n        return tasks.some(task => task.title === task_title)\n    }\n\n    const addTask = () => {\n        setTasks([...tasks, {\n            title: task_title,\n            doing: false,\n        }])\n        resetTextField()\n    }\n\n    const deleteTask = (task) => {\n        setTasks(tasks.filter(x => x !== task))\n    }\n\n    const handleCheckboxChanges = task => {\n        setTasks(tasks.filter(x => {\n            if (x === task) x.doing = !x.doing\n            return x\n        }))\n    }\n\n    return (\n        <React.Fragment>\n            <Header/>\n            <Container component='main' maxWidth='xs'>\n                <CssBaseline/>\n                <Box\n                    mt={5}\n                    display='flex'\n                    justifyContent='space-around'\n                >\n                    <TextField\n                        label='タイトル'\n                        value={task_title}\n                        onChange={handleTextFieldChanges}\n                    />\n                    <Button\n                        disabled={task_title === '' || isTaskInclude()}\n                        variant='contained'\n                        color='primary'\n                        onClick={addTask}\n                        href=''\n                    >\n                        作成\n                    </Button>\n                </Box>\n                <List\n                    style={{marginTop: '48px'}}\n                    component='ul'>\n                    {tasks.map(task => (\n                        <ListItem key={task.title} component='li'>\n                            <Checkbox\n                                checked={task.doing}\n                                value='primary'\n                                onChange={() => handleCheckboxChanges(task)}\n                            />\n                            <ListItemText>{task.title}</ListItemText>\n                            <Button\n                                href=''\n                                onClick={() => deleteTask(task)}\n                            >\n                                削除\n                            </Button>\n                        </ListItem>\n                    ))}\n                </List>\n            </Container>\n            <Footer/>\n        </React.Fragment>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}